// // GENERATED CODE - DO NOT MODIFY BY HAND
// // This code was generated by ObjectBox. To update it run the generator again:
// // With a Flutter package, run `flutter pub run build_runner build`.
// // With a Dart package, run `dart run build_runner build`.
// // See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// // ignore_for_file: camel_case_types, depend_on_referenced_packages
// // coverage:ignore-file

// import 'dart:typed_data';

// import 'package:flat_buffers/flat_buffers.dart' as fb;
// import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
// import 'package:objectbox/objectbox.dart';
// import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

// import 'entities/team.dart';
// import 'entities/user.dart';
// import 'entities/workspace.dart';

// export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

// final _entities = <ModelEntity>[
//   ModelEntity(
//       id: const IdUid(1, 7560421510361941626),
//       name: 'User',
//       lastPropertyId: const IdUid(6, 9200896800848835464),
//       flags: 0,
//       properties: <ModelProperty>[
//         ModelProperty(
//             id: const IdUid(1, 9024467617279900782),
//             name: 'userId',
//             type: 6,
//             flags: 1),
//         ModelProperty(
//             id: const IdUid(2, 1592341009510992416),
//             name: 'id',
//             type: 9,
//             flags: 0),
//         ModelProperty(
//             id: const IdUid(3, 3746368638169990735),
//             name: 'firstName',
//             type: 9,
//             flags: 0),
//         ModelProperty(
//             id: const IdUid(4, 8358637324826007909),
//             name: 'lastName',
//             type: 9,
//             flags: 0),
//         ModelProperty(
//             id: const IdUid(5, 5211284127865475827),
//             name: 'email',
//             type: 9,
//             flags: 0),
//         ModelProperty(
//             id: const IdUid(6, 9200896800848835464),
//             name: 'phone',
//             type: 9,
//             flags: 0)
//       ],
//       relations: <ModelRelation>[
//         ModelRelation(
//             id: const IdUid(2, 8382597697527774694),
//             name: 'workspaces',
//             targetId: const IdUid(3, 8749320673848119770))
//       ],
//       backlinks: <ModelBacklink>[]),
//   ModelEntity(
//       id: const IdUid(2, 3730110646854400294),
//       name: 'Team',
//       lastPropertyId: const IdUid(4, 1049564349002358851),
//       flags: 0,
//       properties: <ModelProperty>[
//         ModelProperty(
//             id: const IdUid(1, 5093946561277003133),
//             name: 'teamId',
//             type: 6,
//             flags: 1),
//         ModelProperty(
//             id: const IdUid(2, 4835483812593468431),
//             name: 'name',
//             type: 9,
//             flags: 0),
//         ModelProperty(
//             id: const IdUid(3, 6420939739298673546),
//             name: 'description',
//             type: 9,
//             flags: 0),
//         ModelProperty(
//             id: const IdUid(4, 1049564349002358851),
//             name: 'workspaceIdId',
//             type: 11,
//             flags: 520,
//             indexId: const IdUid(1, 7669178977202487080),
//             relationTarget: 'Workspace')
//       ],
//       relations: <ModelRelation>[
//         ModelRelation(
//             id: const IdUid(1, 399681517602216536),
//             name: 'members',
//             targetId: const IdUid(1, 7560421510361941626))
//       ],
//       backlinks: <ModelBacklink>[]),
//   ModelEntity(
//       id: const IdUid(3, 8749320673848119770),
//       name: 'Workspace',
//       lastPropertyId: const IdUid(6, 1932286751397290151),
//       flags: 0,
//       properties: <ModelProperty>[
//         ModelProperty(
//             id: const IdUid(1, 1650464994151717770),
//             name: 'workspaceId',
//             type: 6,
//             flags: 1),
//         ModelProperty(
//             id: const IdUid(2, 4735565075641810427),
//             name: 'id',
//             type: 9,
//             flags: 0),
//         ModelProperty(
//             id: const IdUid(3, 2336494306579709141),
//             name: 'isCompnay',
//             type: 1,
//             flags: 0),
//         ModelProperty(
//             id: const IdUid(4, 7299537442646065233),
//             name: 'description',
//             type: 9,
//             flags: 0),
//         ModelProperty(
//             id: const IdUid(5, 136332692672543324),
//             name: 'companyId',
//             type: 9,
//             flags: 0),
//         ModelProperty(
//             id: const IdUid(6, 1932286751397290151),
//             name: 'createdBy',
//             type: 9,
//             flags: 0)
//       ],
//       relations: <ModelRelation>[
//         ModelRelation(
//             id: const IdUid(3, 3661519713061364606),
//             name: 'teams',
//             targetId: const IdUid(2, 3730110646854400294)),
//         ModelRelation(
//             id: const IdUid(4, 7769945196623108093),
//             name: 'members',
//             targetId: const IdUid(1, 7560421510361941626))
//       ],
//       backlinks: <ModelBacklink>[])
// ];

// /// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
// /// apps by default a [directory] using `defaultStoreDirectory()` from the
// /// ObjectBox Flutter library.
// ///
// /// Note: for desktop apps it is recommended to specify a unique [directory].
// ///
// /// See [Store.new] for an explanation of all parameters.
// Future<Store> openStore(
//         {String? directory,
//         int? maxDBSizeInKB,
//         int? fileMode,
//         int? maxReaders,
//         bool queriesCaseSensitiveDefault = true,
//         String? macosApplicationGroup}) async =>
//     Store(getObjectBoxModel(),
//         directory: directory ?? (await defaultStoreDirectory()).path,
//         maxDBSizeInKB: maxDBSizeInKB,
//         fileMode: fileMode,
//         maxReaders: maxReaders,
//         queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
//         macosApplicationGroup: macosApplicationGroup);

// /// Returns the ObjectBox model definition for this project for use with
// /// [Store.new].
// ModelDefinition getObjectBoxModel() {
//   final model = ModelInfo(
//       entities: _entities,
//       lastEntityId: const IdUid(3, 8749320673848119770),
//       lastIndexId: const IdUid(1, 7669178977202487080),
//       lastRelationId: const IdUid(4, 7769945196623108093),
//       lastSequenceId: const IdUid(0, 0),
//       retiredEntityUids: const [],
//       retiredIndexUids: const [],
//       retiredPropertyUids: const [],
//       retiredRelationUids: const [],
//       modelVersion: 5,
//       modelVersionParserMinimum: 5,
//       version: 1);

//   final bindings = <Type, EntityDefinition>{
//     User: EntityDefinition<User>(
//         model: _entities[0],
//         toOneRelations: (User object) => [],
//         toManyRelations: (User object) =>
//             {RelInfo<User>.toMany(2, object.userId): object.workspaces},
//         getId: (User object) => object.userId,
//         setId: (User object, int id) {
//           object.userId = id;
//         },
//         objectToFB: (User object, fb.Builder fbb) {
//           final idOffset =
//               object.id == null ? null : fbb.writeString(object.id!);
//           final firstNameOffset = object.firstName == null
//               ? null
//               : fbb.writeString(object.firstName!);
//           final lastNameOffset = object.lastName == null
//               ? null
//               : fbb.writeString(object.lastName!);
//           final emailOffset =
//               object.email == null ? null : fbb.writeString(object.email!);
//           final phoneOffset =
//               object.phone == null ? null : fbb.writeString(object.phone!);
//           fbb.startTable(7);
//           fbb.addInt64(0, object.userId);
//           fbb.addOffset(1, idOffset);
//           fbb.addOffset(2, firstNameOffset);
//           fbb.addOffset(3, lastNameOffset);
//           fbb.addOffset(4, emailOffset);
//           fbb.addOffset(5, phoneOffset);
//           fbb.finish(fbb.endTable());
//           return object.userId;
//         },
//         objectFromFB: (Store store, ByteData fbData) {
//           final buffer = fb.BufferContext(fbData);
//           final rootOffset = buffer.derefObject(0);

//           final object = User()
//             ..userId =
//                 const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
//             ..id = const fb.StringReader(asciiOptimization: true)
//                 .vTableGetNullable(buffer, rootOffset, 6)
//             ..firstName = const fb.StringReader(asciiOptimization: true)
//                 .vTableGetNullable(buffer, rootOffset, 8)
//             ..lastName = const fb.StringReader(asciiOptimization: true)
//                 .vTableGetNullable(buffer, rootOffset, 10)
//             ..email = const fb.StringReader(asciiOptimization: true)
//                 .vTableGetNullable(buffer, rootOffset, 12)
//             ..phone = const fb.StringReader(asciiOptimization: true)
//                 .vTableGetNullable(buffer, rootOffset, 14);
//           InternalToManyAccess.setRelInfo<User>(
//               object.workspaces, store, RelInfo<User>.toMany(2, object.userId));
//           return object;
//         }),
//     Team: EntityDefinition<Team>(
//         model: _entities[1],
//         toOneRelations: (Team object) => [object.workspaceId],
//         toManyRelations: (Team object) =>
//             {RelInfo<Team>.toMany(1, object.teamId): object.members},
//         getId: (Team object) => object.teamId,
//         setId: (Team object, int id) {
//           object.teamId = id;
//         },
//         objectToFB: (Team object, fb.Builder fbb) {
//           final nameOffset =
//               object.name == null ? null : fbb.writeString(object.name!);
//           final descriptionOffset = object.description == null
//               ? null
//               : fbb.writeString(object.description!);
//           fbb.startTable(5);
//           fbb.addInt64(0, object.teamId);
//           fbb.addOffset(1, nameOffset);
//           fbb.addOffset(2, descriptionOffset);
//           fbb.addInt64(3, object.workspaceId.targetId);
//           fbb.finish(fbb.endTable());
//           return object.teamId;
//         },
//         objectFromFB: (Store store, ByteData fbData) {
//           final buffer = fb.BufferContext(fbData);
//           final rootOffset = buffer.derefObject(0);

//           final object = Team()
//             ..teamId =
//                 const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
//             ..name = const fb.StringReader(asciiOptimization: true)
//                 .vTableGetNullable(buffer, rootOffset, 6)
//             ..description = const fb.StringReader(asciiOptimization: true)
//                 .vTableGetNullable(buffer, rootOffset, 8);
//           object.workspaceId.targetId =
//               const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
//           object.workspaceId.attach(store);
//           InternalToManyAccess.setRelInfo<Team>(
//               object.members, store, RelInfo<Team>.toMany(1, object.teamId));
//           return object;
//         }),
//     Workspace: EntityDefinition<Workspace>(
//         model: _entities[2],
//         toOneRelations: (Workspace object) => [],
//         toManyRelations: (Workspace object) => {
//               RelInfo<Workspace>.toMany(3, object.workspaceId): object.teams,
//               RelInfo<Workspace>.toMany(4, object.workspaceId): object.members
//             },
//         getId: (Workspace object) => object.workspaceId,
//         setId: (Workspace object, int id) {
//           object.workspaceId = id;
//         },
//         objectToFB: (Workspace object, fb.Builder fbb) {
//           final idOffset =
//               object.id == null ? null : fbb.writeString(object.id!);
//           final descriptionOffset = object.description == null
//               ? null
//               : fbb.writeString(object.description!);
//           final companyIdOffset = object.companyId == null
//               ? null
//               : fbb.writeString(object.companyId!);
//           final createdByOffset = object.createdBy == null
//               ? null
//               : fbb.writeString(object.createdBy!);
//           fbb.startTable(7);
//           fbb.addInt64(0, object.workspaceId);
//           fbb.addOffset(1, idOffset);
//           fbb.addBool(2, object.isCompnay);
//           fbb.addOffset(3, descriptionOffset);
//           fbb.addOffset(4, companyIdOffset);
//           fbb.addOffset(5, createdByOffset);
//           fbb.finish(fbb.endTable());
//           return object.workspaceId;
//         },
//         objectFromFB: (Store store, ByteData fbData) {
//           final buffer = fb.BufferContext(fbData);
//           final rootOffset = buffer.derefObject(0);

//           final object = Workspace()
//             ..workspaceId =
//                 const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
//             ..id = const fb.StringReader(asciiOptimization: true)
//                 .vTableGetNullable(buffer, rootOffset, 6)
//             ..isCompnay =
//                 const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 8)
//             ..description = const fb.StringReader(asciiOptimization: true)
//                 .vTableGetNullable(buffer, rootOffset, 10)
//             ..companyId = const fb.StringReader(asciiOptimization: true)
//                 .vTableGetNullable(buffer, rootOffset, 12)
//             ..createdBy = const fb.StringReader(asciiOptimization: true)
//                 .vTableGetNullable(buffer, rootOffset, 14);
//           InternalToManyAccess.setRelInfo<Workspace>(object.teams, store,
//               RelInfo<Workspace>.toMany(3, object.workspaceId));
//           InternalToManyAccess.setRelInfo<Workspace>(object.members, store,
//               RelInfo<Workspace>.toMany(4, object.workspaceId));
//           return object;
//         })
//   };

//   return ModelDefinition(model, bindings);
// }

// /// [User] entity fields to define ObjectBox queries.
// class User_ {
//   /// see [User.userId]
//   static final userId = QueryIntegerProperty<User>(_entities[0].properties[0]);

//   /// see [User.id]
//   static final id = QueryStringProperty<User>(_entities[0].properties[1]);

//   /// see [User.firstName]
//   static final firstName =
//       QueryStringProperty<User>(_entities[0].properties[2]);

//   /// see [User.lastName]
//   static final lastName = QueryStringProperty<User>(_entities[0].properties[3]);

//   /// see [User.email]
//   static final email = QueryStringProperty<User>(_entities[0].properties[4]);

//   /// see [User.phone]
//   static final phone = QueryStringProperty<User>(_entities[0].properties[5]);

//   /// see [User.workspaces]
//   static final workspaces =
//       QueryRelationToMany<User, Workspace>(_entities[0].relations[0]);
// }

// /// [Team] entity fields to define ObjectBox queries.
// class Team_ {
//   /// see [Team.teamId]
//   static final teamId = QueryIntegerProperty<Team>(_entities[1].properties[0]);

//   /// see [Team.name]
//   static final name = QueryStringProperty<Team>(_entities[1].properties[1]);

//   /// see [Team.description]
//   static final description =
//       QueryStringProperty<Team>(_entities[1].properties[2]);

//   /// see [Team.workspaceId]
//   static final workspaceId =
//       QueryRelationToOne<Team, Workspace>(_entities[1].properties[3]);

//   /// see [Team.members]
//   static final members =
//       QueryRelationToMany<Team, User>(_entities[1].relations[0]);
// }

// /// [Workspace] entity fields to define ObjectBox queries.
// class Workspace_ {
//   /// see [Workspace.workspaceId]
//   static final workspaceId =
//       QueryIntegerProperty<Workspace>(_entities[2].properties[0]);

//   /// see [Workspace.id]
//   static final id = QueryStringProperty<Workspace>(_entities[2].properties[1]);

//   /// see [Workspace.isCompnay]
//   static final isCompnay =
//       QueryBooleanProperty<Workspace>(_entities[2].properties[2]);

//   /// see [Workspace.description]
//   static final description =
//       QueryStringProperty<Workspace>(_entities[2].properties[3]);

//   /// see [Workspace.companyId]
//   static final companyId =
//       QueryStringProperty<Workspace>(_entities[2].properties[4]);

//   /// see [Workspace.createdBy]
//   static final createdBy =
//       QueryStringProperty<Workspace>(_entities[2].properties[5]);

//   /// see [Workspace.teams]
//   static final teams =
//       QueryRelationToMany<Workspace, Team>(_entities[2].relations[0]);

//   /// see [Workspace.members]
//   static final members =
//       QueryRelationToMany<Workspace, User>(_entities[2].relations[1]);
// }
